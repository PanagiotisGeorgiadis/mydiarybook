/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ui;

import controller.PersonalGoalController;
import dao.PersonalGoalDao;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import dao.MyDataBase;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author alex
 */
public class PersonalGoalForm extends javax.swing.JFrame {
    private PersonalGoalController PersonalGoalController;
    private String database = "PersonalGoal.txt";

    /**
     * Creates new form PersonalGoalForm
     */
    public PersonalGoalForm() {
        initComponents();
        db = new MyDataBase();
         db.loadDatabase(database);
    }
    
    public PersonalGoalForm(String txt) {
        initComponents();
      
      
    }

    public String getAnnouncementEditorPanel() {
        return announcementEditorPanel.getText().toString();
    }

    public void setAnnouncementEditorPanel(JEditorPane AnnouncementEditorPanel) {
        this.announcementEditorPanel = AnnouncementEditorPanel;
    }

    public String getLocationTextField() {
        return locationTextField.getText().toString();
    }

    public void setLocationTextField(JTextField locationTextField) {
        this.locationTextField = locationTextField;
    }

    public String getTitleTextField() {
        return titleTextField.getText().toString();
    }

    public void setTitleTextField(JTextField titleTextField) {
        this.titleTextField = titleTextField;
    }

    public String getWhenDateSpinner() {
        return whenDateSpinner.getValue().toString();
    }

    public void setWhenDateSpinner(JSpinner whenDateSpinner) {
        this.whenDateSpinner = whenDateSpinner;
    }

    public String getWithPersonTextField() {
        return withPersonTextField.getText().toString();
    }

    public void setWithPersonTextField(JTextField withPersonTextField) {
        this.withPersonTextField = withPersonTextField;
    }
    
    
     
   
     
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        locationLabel = new javax.swing.JLabel();
        withPersonLabel = new javax.swing.JLabel();
        titleTextField = new javax.swing.JTextField();
        locationTextField = new javax.swing.JTextField();
        withPersonTextField = new javax.swing.JTextField();
        WhenDate = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        announcementEditorPanel = new javax.swing.JEditorPane();
        AnnouncementLabel = new javax.swing.JLabel();
        whenDateSpinner = new javax.swing.JSpinner();
        addNewFotoLabel = new javax.swing.JLabel();
        browseFotoFile = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();
        browseFotoTextField = new javax.swing.JTextField();
        buttonUploadFoto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("New Personal Goal");

        titleLabel.setText("Title:");

        locationLabel.setText("Location:");

        withPersonLabel.setText("With Person:");

        WhenDate.setText("WhenDate");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(announcementEditorPanel);

        AnnouncementLabel.setText("Announcement");

        whenDateSpinner.setModel(new javax.swing.SpinnerDateModel());
        whenDateSpinner.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        whenDateSpinner.setEditor(new javax.swing.JSpinner.DateEditor(whenDateSpinner, "dd/MM/yyyy"));

        addNewFotoLabel.setText("UPLOAD YOUR FOTO");
        addNewFotoLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        browseFotoFile.setText("Browse..");
        browseFotoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFotoFileActionPerformed(evt);
            }
        });

        imageLabel.setToolTipText("");
        imageLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        browseFotoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFotoTextFieldActionPerformed(evt);
            }
        });

        buttonUploadFoto.setText("Upload");
        buttonUploadFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUploadFotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(locationLabel)
                            .addComponent(withPersonLabel)
                            .addComponent(titleLabel)
                            .addComponent(WhenDate)
                            .addComponent(AnnouncementLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveButton)
                                .addGap(51, 51, 51)
                                .addComponent(cancelButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(whenDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(locationTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                        .addComponent(titleTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(withPersonTextField, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(addNewFotoLabel)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(browseFotoTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(browseFotoFile)))
                                        .addGap(10, 10, 10))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonUploadFoto)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel1)))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(titleLabel)
                                    .addComponent(titleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(locationLabel)
                                    .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(addNewFotoLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(browseFotoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(browseFotoFile))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonUploadFoto)))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(withPersonLabel)
                            .addComponent(withPersonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(WhenDate)
                            .addComponent(whenDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AnnouncementLabel)
                                .addGap(0, 181, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveButton)
                            .addComponent(cancelButton))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
           
        PersonalGoalController  newPersonalGoalController = new PersonalGoalController(this);   
            String personalGoalTitle = getTitleTextField();
            String personalGoalLocation = getLocationTextField();
            String personalGoalWithPerson = getWithPersonTextField();
            String personalGoalWhenDate = getWhenDateSpinner();
            String personalGoalAnnouncement = getAnnouncementEditorPanel();
        try {            
            newPersonalGoalController.createPersonalGoal(this);
            
            
            
            
            /*save image*/
            
            //TODO: FIX save image
            /*
            
            
            
            
            JFileChooser saveChooser = new JFileChooser();
            saveChooser.setFileFilter(new FileNameExtensionFilter("JPEG File", "jpg"));
            saveChooser.setFileFilter(new FileNameExtensionFilter("PNG File", "png"));
            saveChooser.setFileFilter(new FileNameExtensionFilter("GIF File", "gif"));
            
            if(saveChooser.showSaveDialog(this)==jFileChooser1.APPROVE_OPTION){
            String name = saveChooser.getSelectedFile().getAbsolutePath();
            String name1 = saveChooser.getFileFilter().getDescription();
            if (name1.equals("JPEG File")){
            String ext = ".jpg";
            name = name + ext;
            System.out.println(name);
            }
            else if(name1.equals("PNG File")){
            String ext = ".png";
            name = name + ext;
            System.out.println(name);
            }
            else if(name1.equals("GIF File")){
            String ext = ".gif";
            name = name + ext;
            System.out.println(name);
            }
            else if(name1.equals("All Files")){
            
            System.out.println(name);
            }
            else{
            JOptionPane.showMessageDialog(this, "Error in saving file", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            File f= jFileChooser1.getSelectedFile();
            try {
            ImageIO.write((RenderedImage) imageLabel.getIcon(), "png", File.createTempFile(name, name1));
            } catch (IOException ex) {
            Logger.getLogger(PersonalGoalForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
            */
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,"Somethink wrong ");
        }
                                 
                           
                           
                       
                       
                   
                       
                 
              
                
       
           
             
    }//GEN-LAST:event_saveButtonActionPerformed

    private File getFile(String fileDescription, String[] fileSuffixes, String dialog )
    {
        JFileChooser f = new JFileChooser();
        f.setFileFilter( new FileNameExtensionFilter(fileDescription,fileSuffixes)); 
        f.setAcceptAllFileFilterUsed(false);
        if(f.showDialog(this, dialog) == JFileChooser.CANCEL_OPTION )
            return null;
        else
            return f.getSelectedFile();
    }
    private void browseFotoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFotoFileActionPerformed

        File file = getFile("Image", ImageIO.getReaderFileSuffixes(), "Select");
        if(file != null)
            browseFotoTextField.setText(file.getAbsolutePath());

    }//GEN-LAST:event_browseFotoFileActionPerformed

    private void browseFotoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFotoTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_browseFotoTextFieldActionPerformed

    private void buttonUploadFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUploadFotoActionPerformed
           
           String fileName = browseFotoTextField.getText();
           if(fileName.equals(""))
               System.out.println("Error[buttonUpload()]: File not selected");
           else
           {
               File file = new File(fileName);
               if(file == null)
                   System.out.println("Error[buttonUpload()]: Can not load file");
               else
               {
                    BufferedImage img = null;
                    try {
                        img = ImageIO.read(file);
                    } catch (IOException e) {
                        System.out.println("Error[ddButtonActionPerformed()] Can not add image");    
                    }
                    int w = imageLabel.getWidth();
                    int h = imageLabel.getHeight();

                    int type = img.getType() == 0? BufferedImage.TYPE_INT_ARGB : img.getType();

                    BufferedImage resizedImg = new BufferedImage(w, h, type);
                    Graphics g = resizedImg.createGraphics();
                    g.drawImage(img, 0, 0, w, h, null);
                    g.dispose();
                    imageLabel.setIcon(new ImageIcon(resizedImg));
               } 
           }
    }//GEN-LAST:event_buttonUploadFotoActionPerformed

       public void displayErrorMessage(String errorMessage)
    {
        JOptionPane.showMessageDialog(this, errorMessage);
    }
       
      public class Utils {

    public final static String jpeg = "jpeg";
    public final static String jpg = "jpg";
    public final static String gif = "gif";
    public final static String tiff = "tiff";
    public final static String tif = "tif";
    public final static String png = "png";

    /*
     * Get the extension of a file.
     */  
    public  String getExtension(File f) {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');

        if (i > 0 &&  i < s.length() - 1) {
            ext = s.substring(i+1).toLowerCase();
        }
        return ext;
    }
} 
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws UnsupportedEncodingException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonalGoalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonalGoalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonalGoalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonalGoalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PersonalGoalForm().setVisible(true);
            }
        });
        
       
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AnnouncementLabel;
    private javax.swing.JLabel WhenDate;
    private javax.swing.JLabel addNewFotoLabel;
    private javax.swing.JEditorPane announcementEditorPanel;
    private javax.swing.JButton browseFotoFile;
    private javax.swing.JTextField browseFotoTextField;
    private javax.swing.JButton buttonUploadFoto;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField titleTextField;
    private javax.swing.JSpinner whenDateSpinner;
    private javax.swing.JLabel withPersonLabel;
    private javax.swing.JTextField withPersonTextField;
    // End of variables declaration//GEN-END:variables
    private BufferedImage dialogImage;
    private MyDataBase db;
}
